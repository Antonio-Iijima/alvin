(def t (a b) a)
(def f (a b) b)
(def AND (a b) (a b f))
(def OR (a b) (a t b))
(def NOT (a) (a f t))
(def NOR (a b) (~ (| a b)))
(def NAND (a b) (~ (& a b)))

(def EVAL (expr)
  (cond
    ((== (car expr) '&) (AND (EVAL (ref expr 1)) (EVAL (ref expr 2))))
    ((== (car expr) '|) (OR (EVAL (ref expr 1)) (EVAL (ref expr 2))))
    ((== (car expr) '~) (NOT (EVAL (ref expr 1))))
    ((== (car expr) '~|) (NOR (ref expr 1) (ref expr 2)))
    ((== (car expr) '~&) (NAND (ref expr 1) (ref expr 2)))
    (else expr)))

--(EVAL (usrin >> ))
