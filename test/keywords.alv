-- append
(append (1 2) (3 4))

-- cons
(cons 1 (2 3))

-- elem
(elem 1 (1 2 3))
(elem 1 (2 3))

-- ref
(ref (1 2 3) 2)
(ref (1 2 3 4) -1)

-- setref
(set l (1 2 3 4))
l
(setref l 2 10)
l

-- predicate
(atom? '1)
(null? '(1 2))

-- repeat
(set a 0)
(repeat 10 (update a (++ a)))

-- let
(let ((a 1) (b 2) (c 3)) (+ a (* b c)))

-- eval
(eval '(+ 1 2))

-- getfile
(set file (getfile examples/input.alv))
file

-- load
(load examples/input.alv)

-- globals
(global a 1)
(global a)

-- misc
(!= 1 2)
(!= 1 1)

(<= 1 2)
(<= 2 1)
(<= 1 1)

(>= 2 1)
(>= 1 2)
(>= 1 1)

(// 1 2)

(> 1 2)
(> 2 1)
(> 1 1)

(/ 1 2)

(- 2 1)

(% 312 7)

(not 1)
(not ())
(not #t)

(or 0 0)
(or 0 1)
(or 1 0)
(or 1 1)

(xor 0 0)
(xor 0 1)
(xor 1 0)
(xor 1 1)

(nor 0 0)
(nor 1 0)
(nor 0 1)
(nor 1 1)

(nand 0 0)
(nand 1 0)
(nand 0 1)
(nand 1 1)
