-- NOT FULLY WORKING


(def null. (x) 
    (eq x '())) 

(def and. (x y)
    (cond 
        (x 
            (cond 
                (y #t) 
                (else #f)))
        (else #f)))

(def not. (x)
    (cond 
        (x #f)
        (else #t)))

(def append. (x y)
    (cond 
        ((null. x) y)
        (else (cons (car x) (append. (cdr x) y)))))

(def pair. (x y)
    (cond 
        ((and. (null. x) (null. y)) '())
        ((and. (not. (atom? x)) (not. (atom? y))) 
            (cons 
                (list (car x) (car y))
                (pair. (cdr x) (cdr y))))))

(def assoc. (x y)
    (cond
        ((eq (caar y) x) (cadar y))
        (else (assoc. x (cdr y)))))

(def eval. (e a)
    (cond
        ((atom? e) (assoc. e a))
        ((atom? (car e))
            (cond
                ((eq (car e) 'quote) (cadr e))
                ((eq (car e) 'atom)  (atom?    (eval. (cadr e) a)))
                ((eq (car e) 'eq)    (eq       (eval. (cadr e) a)
                                            (eval. (caddr e) a)))
                ((eq (car e) 'car)   (car      (eval. (cadr e) a)))
                ((eq (car e) 'cdr)   (cdr      (eval. (cadr e) a)))
                ((eq (car e) 'cons)  (cons (eval. (cadr e) a)
                                            (eval. (caddr e) a)))
                ((eq (car e) 'cond) (evcon. (cdr e) a))
                (else (eval. (cons (assoc. (car e) a)
                                (cdr e))
                            a))))
        ((eq (caar e) 'label)
            (eval. (cons (caddar e) (cdr e))
                (cons (list (cadar e) (car e)) a)))
        ((eq (caar e) 'lambda)
            (eval. (caddar e)
                (append. (pair. (cadar e) (evlis. (cdr e) a))
                            a)))))

(def evcon. (c a)
    (cond
        ((eval. (caar c) a) (eval. (cadar c) a))
        (#t (evcon. (cdr c) a))))
        
(def evlis. (m a)
    (cond 
        ((null. m) '())
        (#t (cons (eval. (car m) a) (evlis. (cdr m) a)))))


-- test cases

(eval. 'x '((x a) (y b)))
-- a

(eval. '(eq 'a 'a) '())
-- t

(eval. '(cons x '(b c)) '((x a) (y b)))
-- (a b c)

(eval. '(cond ((atom x) 'atom) (#t 'list)) '((x '(a b))))
-- list

(eval. '(f '(b c))
 '((f (lambda (x) (cons 'a x)))))
-- (a b c)

(eval. '((label firstatom (lambda (x)
    (cond 
        ((atom x) x)
        (#t (firstatom (car x))))))
        y)
    '((y ((a b) (c d)))))
-- a

(eval. '((lambda (x y) (cons x (cdr y)))
        'a
        '(b c d))
    '())
-- (a c d)