(def t (a b) a)
(def f (a b) b)
(def AND (a b) (a b f))
(def OR (a b) (a t b))
(def NOT (a) (a f t))

(def invert (x)
  (cond
    ((== 't' x) 'f')
    (else 't')))

(def prep (expr)
  (cond
    ((null? expr) expr)
    ((== '~' (car expr)) (append (invert (ref expr 1)) (prep (ref expr 2:))))
    (else (append (car expr) (prep (cdr expr))))))

(def eval1 (expr)
  (cond
    ((== expr 't') t)
    ((== expr 'f') f)
    ((== (ref expr 1) '&') (AND (eval1 (car expr)) (eval1 (ref expr 2:))))
    ((== (ref expr 1) '|') (OR (eval1 (car expr)) (eval1 (ref expr 2:))))
    ((== (ref expr 1) '=') (set (car expr) (eval1 (ref expr 2:))))
    (else expr)))

(repeat 10 (show (eval1 (prep (usrin boolexpr> )))))