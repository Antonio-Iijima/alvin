(def null. (x) (eq x '()'))

(def and. (x y)
  (cond (x (cond (y #t) 
                 (else #f)))
        (else #f)))

(def not. (x)
  (cond (x #f)
        (else #t)))

(def append. (x y)
  (cond ((null. x) y)
        (else (cons (car x) (append. (cdr x) y)))))

(def pair. (x y) 
  (cond
    ((and. (null. x) (null. y)) '()')
    ((and. (not. (atom? x)) (not. (atom? y)))
        (cons (list (car x) (car y))
              (pair. (cdr x) (cdr y))))))

(def assoc. (x y)
  (cond ((eq (car (car y)) x) (car (cdr (car y))))
        (else (assoc. x (cdr y)))))